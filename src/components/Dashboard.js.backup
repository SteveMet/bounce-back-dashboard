import React, { useState } from 'react';
import { Inbox, Send, Users, Tag, BarChart2, Settings, CheckCircle, XCircle, Edit, MoreHorizontal, Upload, Download, Linkedin, Twitter, Globe } from 'lucide-react';

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState('inbox');
  const [contacts, setContacts] = useState([
    { id: 1, name: 'John Doe', email: 'john@example.com', company: 'ABC Corp', status: 'pending', valid: null },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com', company: 'XYZ Inc', status: 'responded', valid: true },
    { id: 3, name: 'Bob Johnson', email: 'bob@example.com', company: '123 LLC', status: 'pending', valid: null },
  ]);
  const [userProfile, setUserProfile] = useState({
    name: 'Alex User',
    role: 'Sales Manager',
    company: 'Tech Innovations Inc.',
    linkedIn: '',
    twitter: '',
    companyWebsite: '',
  });

  const tabs = [
    { id: 'inbox', name: 'Inbox', icon: Inbox },
    { id: 'sent', name: 'Sent', icon: Send },
    { id: 'contacts', name: 'Contacts', icon: Users },
    { id: 'categories', name: 'Categories', icon: Tag },
    { id: 'analytics', name: 'Analytics', icon: BarChart2 },
    { id: 'settings', name: 'Settings', icon: Settings },
  ];

  const handleValidation = (id, isValid) => {
    setContacts(contacts.map(contact => 
      contact.id === id ? { ...contact, valid: isValid, status: isValid ? 'approved' : 'rejected' } : contact
    ));
  };

  const renderContent = () => {
    switch (activeTab) {
      case 'inbox':
        return <InboxContent />;
      case 'sent':
        return <SentContent />;
      case 'contacts':
        return <ContactsContent contacts={contacts} handleValidation={handleValidation} />;
      case 'categories':
        return <CategoriesContent />;
      case 'analytics':
        return <AnalyticsContent />;
      case 'settings':
        return <SettingsContent userProfile={userProfile} setUserProfile={setUserProfile} />;
      default:
        return null;
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className="w-64 bg-white shadow-lg">
        <div className="p-6">
          <h1 className="text-3xl font-bold text-blue-600">Bounce Back</h1>
        </div>
        <nav className="mt-6">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              className={`flex items-center w-full px-6 py-3 text-left transition-colors duration-200 ease-in-out ${
                activeTab === tab.id ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:bg-gray-100'
              }`}
              onClick={() => setActiveTab(tab.id)}
            >
              <tab.icon className="mr-4 h-5 w-5" />
              <span className="text-sm font-medium">{tab.name}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Main content */}
      <div className="flex-1 overflow-auto p-8">
        <h2 className="text-3xl font-bold mb-8 text-gray-800">{tabs.find(tab => tab.id === activeTab)?.name}</h2>
        {renderContent()}
      </div>
    </div>
  );
};

const InboxContent = () => (
  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
    <Card title="Pending Responses" value="23" />
    <Card title="Auto-Responded Today" value="47" />
  </div>
);

const SentContent = () => (
  <div className="bg-white shadow rounded-lg p-6">
    <p className="text-gray-600">Sent emails content goes here</p>
  </div>
);

const ContactsContent = ({ contacts, handleValidation }) => (
  <div className="space-y-6">
    <div className="flex justify-between items-center">
      <h3 className="text-2xl font-semibold text-gray-800">Contacts Management</h3>
      <div className="space-x-4">
        <Button variant="outline" size="sm">
          <Upload className="w-4 h-4 mr-2" />
          Import
        </Button>
        <Button variant="outline" size="sm">
          <Download className="w-4 h-4 mr-2" />
          Export
        </Button>
      </div>
    </div>
    <div className="bg-white shadow-md rounded-lg overflow-hidden">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            {['Name', 'Email', 'Company', 'Status', 'Actions'].map((header) => (
              <th key={header} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                {header}
              </th>
            ))}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {contacts.map((contact) => (
            <tr key={contact.id}>
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{contact.name}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{contact.email}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{contact.company}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                  contact.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                  contact.status === 'responded' ? 'bg-green-100 text-green-800' : 
                  'bg-red-100 text-red-800'
                }`}>
                  {contact.status}
                </span>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div className="flex space-x-2">
                  {contact.valid === null && (
                    <>
                      <Button variant="ghost" size="sm" onClick={() => handleValidation(contact.id, true)}>
                        <CheckCircle className="w-4 h-4 text-green-500" />
                      </Button>
                      <Button variant="ghost" size="sm" onClick={() => handleValidation(contact.id, false)}>
                        <XCircle className="w-4 h-4 text-red-500" />
                      </Button>
                    </>
                  )}
                  <Button variant="ghost" size="sm">
                    <Edit className="w-4 h-4 text-blue-500" />
                  </Button>
                  <Button variant="ghost" size="sm">
                    <MoreHorizontal className="w-4 h-4 text-gray-500" />
                  </Button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
);

const CategoriesContent = () => (
  <div className="bg-white shadow rounded-lg p-6">
    <p className="text-gray-600">Categories management content goes here</p>
  </div>
);

const AnalyticsContent = () => (
  <div className="bg-white shadow rounded-lg p-6">
    <p className="text-gray-600">Analytics content goes here</p>
  </div>
);

const SettingsContent = ({ userProfile, setUserProfile }) => {
  const handleInputChange = (e) => {
    setUserProfile({ ...userProfile, [e.target.name]: e.target.value });
  };

  return (
    <div className="space-y-8">
      <h3 className="text-2xl font-semibold text-gray-800">User Profile Settings</h3>
      <div className="bg-white shadow-md rounded-lg p-6">
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
          {['name', 'role', 'company'].map((field) => (
            <div key={field}>
              <label htmlFor={field} className="block text-sm font-medium text-gray-700 mb-1">
                {field.charAt(0).toUpperCase() + field.slice(1)}
              </label>
              <input
                type="text"
                name={field}
                id={field}
                value={userProfile[field]}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          ))}
          {[
            { name: 'linkedIn', icon: Linkedin },
            { name: 'twitter', icon: Twitter },
            { name: 'companyWebsite', icon: Globe }
          ].map(({ name, icon: Icon }) => (
            <div key={name}>
              <label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-1">
                {name.charAt(0).toUpperCase() + name.slice(1)}
              </label>
              <div className="mt-1 flex rounded-md shadow-sm">
                <span className="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500">
                  <Icon className="h-4 w-4" />
                </span>
                <input
                  type="text"
                  name={name}
                  id={name}
                  value={userProfile[name]}
                  onChange={handleInputChange}
                  className="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
          ))}
        </div>
        <div className="mt-6">
          <Button>Save Profile</Button>
        </div>
      </div>
    </div>
  );
};

const Card = ({ title, value }) => (
  <div className="bg-white overflow-hidden shadow-lg rounded-lg">
    <div className="px-4 py-5 sm:p-6">
      <dt className="text-sm font-medium text-gray-500 truncate">{title}</dt>
      <dd className="mt-1 text-3xl font-semibold text-gray-900">{value}</dd>
    </div>
  </div>
);

const Button = ({ children, variant = "primary", size = "md", ...props }) => {
  const baseClasses = "inline-flex items-center border font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500";
  const variantClasses = {
    primary: "border-transparent text-white bg-blue-600 hover:bg-blue-700",
    outline: "border-gray-300 text-gray-700 bg-white hover:bg-gray-50",
    ghost: "border-transparent text-blue-600 bg-white hover:bg-blue-50",
  };
  const sizeClasses = {
    sm: "px-2.5 py-1.5 text-xs",
    md: "px-4 py-2 text-sm",
    lg: "px-6 py-3 text-base",
  };

  return (
    <button
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]}`}
      {...props}
    >
      {children}
    </button>
  );
};

export default Dashboard;